bdajax
======

AJAX convenience.

This library provides some JavaScript helper functions and a simple 
dispatcher system which is driven by attributes. These attributes are defined
in a XML namespace extension, placed in your XHTML markup.

You can basically control 3 behaviors with the supported attributes:

    - Call functions

    - Trigger events
    
    - Perform actions

Each behavior is bound to a JavaScript event itself. 

Dispatching
-----------

For those who know KSS (Kinetic Style Sheets) and TAL (Tag Attribute Language);
The syntax reminds of TAL - attributes are interpreted by JS instead of TAL
renderer - while the functionality is inspired by KSS.

The main paradigm is the use of an 'event/listener' model, what makes it
possible to 'listen' to, and trigger 'events' on the DOM tree.

Attributes
----------

You can define the following attributes in your markup:

  * ajax:bind="evt1 evt2"
        Indicate a bdajax behavior on DOM element and the event(s) triggering
        it.

  * ajax:call="function1:selector1 function2:selector2"
        Call function(s). The function gets passed a jQuery iterator of
        selector and a target object. Target object provides ``url`` and
        ``params``.

  * ajax:event="evt1:sel1 evt2:sel2"
        Trigger event(s) on selector. The triggered event gets the target
        as additional parameter on event.ajaxtarget.
  
  * ajax:action="name1:selector1:mode1 name2:selector2:mode2"
        Perform ajax action(s) on selector with mode. selector points the target
        DOM element while mode defines how to modify the DOM tree. Possible
        mode values are ``inner`` and ``replace``.
  
  * ajax:target="http://fubar.org?param=value"
        AJAX target definition. Consists out of target context URL and a
        query string used for requests on the target context.
        ``ajax:target`` is mandatory when ``ajax:event`` is defined, and
        optional when ``ajax:action`` is defined (depends if event is triggered
        by bdajax or browser event). See examples to get a clue what i am
        talking about.

Messages, Infos, Warnings and Errors
------------------------------------

``bdajax`` provides displaying application messages in a jQuery tools
overlay. ``bdajax.message`` displays a message as is, while ``bdajax.info``,
``bda.warning`` and ``bda.error`` decorates the message with the approriate
icon.
::

    bdajax.message('I am an application Message');

URL Operations
--------------

You can parse hyperlinks for the base URL or the request parameters
::

    bdajax.parseurl('http://fubar.org?param=value');

results in
::

    'http://fubar.org'

while
::

    bdajax.parsequery('http://fubar.org?param=value');

results in
::

    { param: 'value' }

XMLHTTPRequest convenience
--------------------------

``bdajax`` provides the function ``request`` as convenience for
XMLHTTPRequests. By default it sends requests of type ``html`` and displays
a ``bdajax.error`` Message if request fails.
::

    bdajax.request({
        success: function(data) {
            // do something with data.
        },
        url: 'foo',
        params: {
            a: 'a',
            b: 'b'
        },
        type: 'json',
        error: function() {
            bdajax.error('Request failed');
        }
    });

The given ``url`` might contain a query string. The query is parsed and
written to request parameters. If the same request parameter is defined
in URL request query AND params object, latter one rules.

Ajax behaviour and rules defined by XHTML markup attributes
-----------------------------------------------------------

Beside functions for use inside your own javascrips, this library
provides behaviour for performing ajax actions defined in the markup. This
action definitions use a XML namespace extension. Thus your markup must
define this namespace.
::

    <html xmlns="http://www.w3.org/1999/xhtml"
          xmlns:ajax="http://namesspaces.bluedynamics.eu/ajax">
        ...
    </html>

Event binding
-------------

Bind DOM element to events
::

    <a href="http://fubar.org/subpath/to/context/viewname?param=value"
       ajax:bind="keydown click"
    >fubar</a>

Binds the 'a' tag to event ``keydown`` and ``click``.

Trigger events
--------------

Bind ``event`` in the markup.
::

    <a href="http://fubar.org/subpath/to/context/viewname?param=value"
       ajax:event="click:a.autoclick"
    >fubar</a>

Bind multiple events in the markup.
::

    <a href="http://fubar.org/subpath/to/context/viewname?param=value"
       ajax:bind="mouseout"
       ajax:event="click:a.clickme customevent:div#navtree"
    >fubar</a>

``bdajax`` binds on page load ``ajax:bind`` event to ``bdajax.event`` callback
on all dom elements defining an ``ajax:event`` attribute.

Call local Javascript function
------------------------------

Bind ``call`` in the markup.
::

    <a href="http://fubar.org/subpath/to/context/viewname?param=value"
       ajax:bind="click"
       ajax:call="somefunction:div#content"
    >fubar</a>

``bdajax`` binds on page load ``ajax:bind`` event to ``bdajax.call`` callback
on all DOM elements defining an ``ajax:call`` attribute.

Perform a single action
-----------------------

Bind an ``action`` in the markup.
::

    <a href="http://fubar.org/subpath/to/context/viewname?param=value"
       ajax:target="http://fubar.org/subpath/to/context?param=value"
       ajax:action="someaction"
       ajax:mode="append"
    >fubar</a>

``bdajax`` binds on page load ``ajax:bind`` to ``bdajax.action`` callback
on all dom elements defining an ``ajax:action`` attribute.

Perform multiple actions
------------------------

Bind multiple ``actions`` in the markup.
::

    <!-- Query action definitions from server -->
    <a href="http://fubar.org/subpath/to/context/viewname?param=value"
       ajax:target="http://fubar.org/subpath/to/context?param=value"
       ajax:actions="somename"
    >fubar</a>
    
    <!-- Use action definitions from attribute directly -->
    <a href="http://fubar.org/subpath/to/context/viewname?param=value"
       ajax:target="http://fubar.org/subpath/to/context?param=value"
       ajax:actions="somename:a.someclass content:div#content:inner"
    >fubar</a>

``bdajax`` binds on page load `ajax:bind`` to ``bdajax.actions`` callback
on all dom elements defining an ``ajax:actions`` attribute.
 
Credits:
--------

    * Written by Robert Niederreiter <rnix@squarewave.at>

Dependencies:
-------------
    * jQuery
    * jQuery Tools
    * bdajax.js
    * bdajax.css
    * bdajax.images
    * bdajax.pt